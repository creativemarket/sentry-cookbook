#!/bin/bash

PROJECT_NAME="<%= @name %>"
PIDFILE="<%= @pidfile %>"
PIDFILE_GUNICORN="<%= @pidfile_gunicorn %>"
USER_GROUP="<%= @user %>:<%= @group %>"

EXEC="<%= @spawner %>"
EXEC_ARGS=""

usage(){
	echo "$0 {start | stop | restart | status}"
	echo $EXEC
	exit 1
}

start(){
	printf "Starting $PROJECT_NAME... "

	touch $PIDFILE
	chown $USER_GROUP $PIDFILE
	touch $PIDFILE_GUNICORN
	chown $USER_GROUP $PIDFILE_GUNICORN

	if start-stop-daemon --start --quiet --background --make-pidfile --umask 007 --pidfile $PIDFILE --chuid root:root --exec $EXEC -- $EXEC_ARGS
	then
		sleep 3
		echo "success"
	else
		echo "failed"
	fi
}

stop(){
	if [ -f "$PIDFILE" ]; then

		# kill main process
		printf "Stopping $PROJECT_NAME... "
		if start-stop-daemon --stop --quiet --retry 10 --oknodo --pidfile $PIDFILE
		then
			echo "success"
		else
			echo "failed"
		fi
		while [ -x /proc/${PIDFILE} ]
		do
			echo "Waiting for shutdown..."
			sleep 1
		done
		rm -f $PIDFILE

		# kill gunicorn workers
		if [ -f "$PIDFILE_GUNICORN" ]; then
			start-stop-daemon --stop --quiet --retry 10 --oknodo --pidfile $PIDFILE_GUNICORN
			rm -f $PIDFILE_GUNICORN
		fi

		# force exit of sentry processes
		rm -f $SOCKFILE
		PID=`pgrep sentry | egrep -v "$$"`
		kill -9 $PID 2>/dev/null

	else
		echo "$PROJECT_NAME is not running"
	fi
}

restart(){
	echo "Restarting $PROJECT_NAME..."
	stop
	start
}

status(){
	if [ -f "$PIDFILE" ]
	then
		echo "$PROJECT_NAME is running"
	else
		echo "$PROJECT_NAME is not running"
	fi
}

case $1 in
	"start") start;;
	"stop") stop;;
	"restart") restart;;
	"status") status;;
	*) usage;;
esac